{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\Downloads\\\\cvrr_doc-typescript-1\\\\server\\\\web\\\\src\\\\SyncingEditor.tsx\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { initialValue } from \"./slateInitialValue\";\nimport io from \"socket.io-client\";\nimport { Value } from \"slate\";\nconst socket = io(\"http://localhost:4000\");\nexport const SyncingEditor = ({\n  groupId\n}) => {\n  const [value, setValue] = useState(initialValue);\n  const id = useRef(`${Date.now()}`);\n  const editor = useRef(null);\n  const remote = useRef(false);\n  useEffect(() => {\n    fetch(`http://localhost:4000/groups/${groupId}`).then(x => x.json().then(data => {\n      setValue(Value.fromJSON(data));\n    }));\n    const eventName = `new-remote-operations-${groupId}`;\n    socket.on(eventName, ({\n      editorId,\n      ops\n    }) => {\n      if (id.current !== editorId) {\n        remote.current = true;\n        ops.forEach(op => editor.current.applyOperation(op));\n        remote.current = false;\n      }\n    });\n    return () => {\n      socket.off(eventName);\n    };\n  }, [groupId]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: e => {\n      e.preventDefault(); // bold selected text\n\n      editor.current.toggleMark(\"bold\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"bold\"), /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: e => {\n      e.preventDefault(); // bold selected text\n\n      editor.current.toggleMark(\"italic\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"italic\"), /*#__PURE__*/React.createElement(Editor, {\n    ref: editor,\n    style: {\n      backgroundColor: \"#fafafa\",\n      maxWidth: 800,\n      minHeight: 150\n    },\n    value: value,\n    renderMark: (props, _editor, next) => {\n      if (props.mark.type === \"bold\") {\n        return /*#__PURE__*/React.createElement(\"strong\", {\n          style: {\n            letterSpacing: 1,\n            color: \"pink\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }\n        }, props.children);\n      } else if (props.mark.type === \"italic\") {\n        return /*#__PURE__*/React.createElement(\"em\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 20\n          }\n        }, props.children);\n      }\n\n      return next();\n    },\n    onChange: opts => {\n      setValue(opts.value);\n      const ops = opts.operations.filter(o => {\n        if (o) {\n          return o.type !== \"set_selection\" && o.type !== \"set_value\" && (!o.data || !o.data.has(\"source\"));\n        }\n\n        return false;\n      }).toJS().map(o => ({ ...o,\n        data: {\n          source: \"one\"\n        }\n      }));\n\n      if (ops.length && !remote.current) {\n        socket.emit(\"new-operations\", {\n          editorId: id.current,\n          ops,\n          value: opts.value.toJSON(),\n          groupId\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/rohit/Downloads/cvrr_doc-typescript-1/server/web/src/SyncingEditor.tsx"],"names":["React","useState","useRef","useEffect","Editor","initialValue","io","Value","socket","SyncingEditor","groupId","value","setValue","id","Date","now","editor","remote","fetch","then","x","json","data","fromJSON","eventName","on","editorId","ops","current","forEach","op","applyOperation","off","e","preventDefault","toggleMark","backgroundColor","maxWidth","minHeight","props","_editor","next","mark","type","letterSpacing","color","children","opts","operations","filter","o","has","toJS","map","source","length","emit","toJSON"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { initialValue } from \"./slateInitialValue\";\nimport io from \"socket.io-client\";\nimport { Operation, Value } from \"slate\";\n\nconst socket = io(\"http://localhost:4000\");\n\ninterface Props {\n  groupId: string;\n}\n\nexport const SyncingEditor: React.FC<Props> = ({ groupId }) => {\n  const [value, setValue] = useState(initialValue);\n  const id = useRef(`${Date.now()}`);\n  const editor = useRef<Editor | null>(null);\n  const remote = useRef(false);\n\n  useEffect(() => {\n    fetch(`http://localhost:4000/groups/${groupId}`).then(x =>\n      x.json().then(data => {\n        setValue(Value.fromJSON(data));\n      })\n    );\n    const eventName = `new-remote-operations-${groupId}`;\n    socket.on(\n      eventName,\n      ({ editorId, ops }: { editorId: string; ops: Operation[] }) => {\n        if (id.current !== editorId) {\n          remote.current = true;\n          ops.forEach((op: any) => editor.current!.applyOperation(op));\n          remote.current = false;\n        }\n      }\n    );\n\n    return () => {\n      socket.off(eventName);\n    };\n  }, [groupId]);\n\n  return (\n    <>\n      <button\n        onMouseDown={e => {\n          e.preventDefault();\n          // bold selected text\n          editor.current!.toggleMark(\"bold\");\n        }}\n      >\n        bold\n      </button>\n      <button\n        onMouseDown={e => {\n          e.preventDefault();\n          // bold selected text\n          editor.current!.toggleMark(\"italic\");\n        }}\n      >\n        italic\n      </button>\n      <Editor\n        ref={editor}\n        style={{\n          backgroundColor: \"#fafafa\",\n          maxWidth: 800,\n          minHeight: 150\n        }}\n        value={value}\n        renderMark={(props, _editor, next) => {\n          if (props.mark.type === \"bold\") {\n            return (\n              <strong\n                style={{\n                  letterSpacing: 1,\n                  color: \"pink\"\n                }}\n              >\n                {props.children}\n              </strong>\n            );\n          } else if (props.mark.type === \"italic\") {\n            return <em>{props.children}</em>;\n          }\n\n          return next();\n        }}\n        onChange={opts => {\n          setValue(opts.value);\n\n          const ops = opts.operations\n            .filter(o => {\n              if (o) {\n                return (\n                  o.type !== \"set_selection\" &&\n                  o.type !== \"set_value\" &&\n                  (!o.data || !o.data.has(\"source\"))\n                );\n              }\n\n              return false;\n            })\n            .toJS()\n            .map((o: any) => ({ ...o, data: { source: \"one\" } }));\n\n          if (ops.length && !remote.current) {\n            socket.emit(\"new-operations\", {\n              editorId: id.current,\n              ops,\n              value: opts.value.toJSON(),\n              groupId\n            });\n          }\n        }}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}